#!/usr/bin/env python

import sys

from time import time

from PyQt4 import QtCore, QtGui, uic
from PyQt4.QtCore import Qt, pyqtSlot, pyqtSignal, QThread, SIGNAL

import CRTP
from crazyflie import Crazyflie

import ai

from Config import Config
from Config import ConfigParams

flight_tab_class = uic.loadUiType(sys.path[0] + "/cfclient/ui/tabs/flightTab.ui")[0]

MAX_THRUST = 65365.0

class FlightTab(QtGui.QWidget, flight_tab_class):

    uiSetupReadySignal = pyqtSignal()

    UI_DATA_UPDATE_FPS = 10

    batteryUpdateSignal = pyqtSignal(int)
    imuUpdateSignal = pyqtSignal(float, float, float)
    motorUpdateSignal = pyqtSignal(int, int, int, int)

    def __init__(self, tabWidget, helper, *args):
        super(FlightTab, self).__init__(*args)
        self.setupUi(self)
        
        self.tabWidget = tabWidget
        self.helper = helper

        self.batteryUpdateSignal.connect(self.updateBattData)
        self.imuUpdateSignal.connect(self.updateIMUData)
        self.motorUpdateSignal.connect(self.updateMotorData)

        # Incomming signals
        self.helper.cf.connected.addCallback(self.connected)
        self.helper.cf.disconnected.addCallback(self.disconnected)
        self.helper.inputDeviceReader.inputUpdateSignal.connect(self.updateInputControl)
        self.helper.inputDeviceReader.calUpdateSignal.connect(self.calUpdateFromInput) 
        self.helper.logdispatcher.batteryUpdateData.addCallback(self.batteryUpdateSignal.emit)
        self.helper.logdispatcher.motorUpdateData.addCallback(self.motorUpdateSignal.emit)
        #self.helper.cf.motorUpdateSignal.connect(self.updateMotorData)
        self.helper.logdispatcher.imuUpdateData.addCallback(self.imuUpdateSignal.emit)

    	# Connect UI signals that are in this tab
        self.flightModeCombo.currentIndexChanged.connect(self.flightmodeChange)
        self.minThrust.valueChanged.connect(self.minMaxThrustChanged)
        self.maxThrust.valueChanged.connect(self.minMaxThrustChanged)
        self.thrustLoweringSlewRateLimit.valueChanged.connect(self.thrustLoweringSlewRateLimitChanged)
        self.slewEnableLimit.valueChanged.connect(self.thrustLoweringSlewRateLimitChanged)
        self.targetCalRoll.valueChanged.connect(self.calValueChanged)
        self.targetCalPitch.valueChanged.connect(self.calValueChanged)
        self.maxAngle.valueChanged.connect(self.maxAngleChanged)
        self.maxYawRate.valueChanged.connect(self.maxYawRateChanged)
        self.uiSetupReadySignal.connect(self.uiSetupReady)
        #self.xmodeCheck.stateChanged.connect(self.changeXmode)
        self.isInCrazyFlightmode = False
        self.uiSetupReady()
        
        self.ai = ai.AttitudeIndicator()
        self.gridLayout.addWidget(self.ai, 0, 1)
        
        self.uiUpdateTimer = time()

    def thrustToPercentage(self, thrust):
        return ((thrust/MAX_THRUST)*100.0)

    def percentageToThrust(self, percentage):
        return int(MAX_THRUST*(percentage/100.0))

    def uiSetupReady(self):
        try:        
            self.flightModeCombo.setCurrentIndex(self.flightModeCombo.findText(Config.instance().getParam(ConfigParams.FLIGHT_MODE), Qt.MatchFixedString))
        except:
            self.flightModeCombo.setCurrentIndex(1)

    def connected(self, linkURI):
	print "FlightTab: Connected to %s" % linkURI

    def disconnected(self, linkURI):
        print "FlightTab: Disconnected from %s" % linkURI
        self.ai.setRollPitch(0, 0)
        self.actualRoll.setText("");
        self.actualPitch.setText("");
        self.actualYaw.setText("");

    def controllerModeChange(self, newIndex):
        self.helper.inputDeviceReader.setControllerModeSignal.emit(newIndex + 1)
        Config.instance().setParam(ConfigParams.CONTROLLER_MODE, newIndex + 1)

    def updateIMUData(self, roll, pitch, yaw):
        if (time() - self.uiUpdateTimer > (1/FlightTab.UI_DATA_UPDATE_FPS)):
            self.actualRoll.setText(str(roll));
            self.actualPitch.setText(str(pitch));
            self.actualYaw.setText(str(yaw));
            self.uiUpdateTimer = time()
            
            self.ai.setRollPitch(-roll, pitch)

    def updateMotorData(self, m1, m2, m3, m4):
        if (time() - self.uiUpdateTimer > (1/FlightTab.UI_DATA_UPDATE_FPS)):
            self.actualM1.setValue(m1)
            self.actualM2.setValue(m2)
            self.actualM3.setValue(m3)
            self.actualM4.setValue(m4)

    def minMaxThrustChanged(self):
        self.helper.inputDeviceReader.updateMinMaxThrustSignal.emit(self.percentageToThrust(self.minThrust.value()), 
                                                                    self.percentageToThrust(self.maxThrust.value()))
        if (self.isInCrazyFlightmode == True):
            Config.instance().setParam(ConfigParams.CRAZY_MIN_THRUST, self.percentageToThrust(self.minThrust.value()))
            Config.instance().setParam(ConfigParams.CRAZY_MAX_THRUST, self.percentageToThrust(self.maxThrust.value()))

    def thrustLoweringSlewRateLimitChanged(self):
        self.helper.inputDeviceReader.updateThrustLoweringSlewrateSignal.emit(
                                            self.percentageToThrust(self.thrustLoweringSlewRateLimit.value()),
                                            self.percentageToThrust(self.slewEnableLimit.value()))
        if (self.isInCrazyFlightmode == True):
            Config.instance().setParam(ConfigParams.CRAZY_SLEW_LIMIT,
                                            self.percentageToThrust(self.slewEnableLimit.value()))
            Config.instance().setParam(ConfigParams.CRAZY_SLEW_RATE,
                                            self.percentageToThrust(self.thrustLoweringSlewRateLimit.value()))

    def maxYawRateChanged(self):
        self.helper.inputDeviceReader.updateMaxYawRateSignal.emit(self.maxYawRate.value())
        if (self.isInCrazyFlightmode == True):
            Config.instance().setParam(ConfigParams.CRAZY_MAX_YAWRATE, self.maxYawRate.value())

    def maxAngleChanged(self):
        self.helper.inputDeviceReader.updateMaxRPAngleSignal.emit(self.maxAngle.value())
        if (self.isInCrazyFlightmode == True):
            Config.instance().setParam(ConfigParams.CRAZY_MAX_RP_ANGLE, self.maxAngle.value())

    def calValueChanged(self):
        self.helper.inputDeviceReader.updateRPCalSignal.emit(self.targetCalRoll.value(), self.targetCalPitch.value())
        if (self.isInCrazyFlightmode == True):
            Config.instance().setParam(ConfigParams.CAL_ROLL, self.targetCalRoll.value())
            Config.instance().setParam(ConfigParams.CAL_PITCH, self.targetCalPitch.value())

    def calUpdateFromInput(self, rollCal, pitchCal):
        self.targetCalRoll.setValue(rollCal)
        self.targetCalPitch.setValue(pitchCal)
        if (self.isInCrazyFlightmode == True):
            Config.instance().setParam(ConfigParams.CAL_ROLL, rollCal)
            Config.instance().setParam(ConfigParams.CAL_PITCH, pitchCal)

    def updateBattData(self, voltage):
        #self.actualBattVoltage.setText(str(voltage/1000.0))
        #print voltage
        pass

    def updateInputControl(self, roll, pitch, yaw, thrust):
        self.targetRoll.setText(("%0.2f" % roll));
        self.targetPitch.setText(("%0.2f" % pitch));
        self.targetYaw.setText(("%0.2f" % yaw));
        self.targetThrust.setText(("%0.2f %%" % self.thrustToPercentage(thrust)));
        self.thrustProgress.setValue(thrust)

    def flightmodeChange(self, item):
        Config.instance().setParam(ConfigParams.FLIGHT_MODE, self.flightModeCombo.itemText(item))
        #print "Changed flightmode to %i %s" % (item, self.flightModeCombo.itemText(item))
        self.isInCrazyFlightmode = False
        if (item == 2): # Normal
            self.maxAngle.setValue(15)
            self.maxThrust.setValue(self.thrustToPercentage(50000))
            self.minThrust.setValue(self.thrustToPercentage(20000))
            self.slewEnableLimit.setValue(self.thrustToPercentage(30000))
            self.thrustLoweringSlewRateLimit.setValue(self.thrustToPercentage(20000))
            self.maxYawRate.setValue(200)
        if (item == 1): # Safe
            self.maxAngle.setValue(10)
            self.maxThrust.setValue(self.thrustToPercentage(50000))
            self.minThrust.setValue(self.thrustToPercentage(20000))
            self.slewEnableLimit.setValue(self.thrustToPercentage(30000))
            self.thrustLoweringSlewRateLimit.setValue(self.thrustToPercentage(20000))
            self.maxYawRate.setValue(50)
        if (item == 0): # Crazy
            try:
                self.maxAngle.setValue(int(Config.instance().getParam(ConfigParams.CRAZY_MAX_RP_ANGLE)))
                self.maxThrust.setValue(self.thrustToPercentage(int(Config.instance().getParam(ConfigParams.CRAZY_MAX_THRUST))))
                self.minThrust.setValue(self.thrustToPercentage(int(Config.instance().getParam(ConfigParams.CRAZY_MIN_THRUST))))
                self.slewEnableLimit.setValue(self.thrustToPercentage(int(Config.instance().getParam(ConfigParams.CRAZY_SLEW_LIMIT))))
                self.thrustLoweringSlewRateLimit.setValue(self.thrustToPercentage(int(Config.instance().getParam(ConfigParams.CRAZY_SLEW_RATE))))
                self.maxYawRate.setValue(int(Config.instance().getParam(ConfigParams.CRAZY_MAX_YAWRATE)))
            except KeyError:
                self.isInCrazyFlightmode = True
                self.maxAngle.setValue(20)
                self.maxThrust.setValue(self.thrustToPercentage(55000))
                self.minThrust.setValue(self.thrustToPercentage(20000))
                self.slewEnableLimit.setValue(self.thrustToPercentage(30000))
                self.thrustLoweringSlewRateLimit.setValue(self.thrustToPercentage(20000))
                self.maxYawRate.setValue(400)
            self.isInCrazyFlightmode = True

        if (item == 1 or item == 2):
            newState = False
        else:
            newState = True
        self.maxThrust.setEnabled(newState)
        self.maxAngle.setEnabled(newState)
        self.minThrust.setEnabled(newState)
        self.thrustLoweringSlewRateLimit.setEnabled(newState)
        self.slewEnableLimit.setEnabled(newState)
        self.maxYawRate.setEnabled(newState)

    @pyqtSlot(bool)
    def changeXmode(self, checked):
        self.helper.cf.commander.xMode = checked

    @pyqtSlot(bool)
    def toggleVisibility(self, checked):
        if checked:
            self.tabWidget.addTab(self, self.getTabName())
        if not checked:
            self.tabWidget.removeTab(self.tabWidget.indexOf(self))

    def getMenuName(self):
        return 'Flight data'

    def getTabName(self):
        return 'Flight data'

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    main_window = FlightTab(None)
    main_window.show()
    sys.exit(app.exec_())
